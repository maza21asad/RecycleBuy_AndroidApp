package com.zmonster.recyclebuy.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zmonster.recyclebuy.bean.Shop;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP".
*/
public class ShopDao extends AbstractDao<Shop, Long> {

    public static final String TABLENAME = "SHOP";

    /**
     * Properties of entity Shop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property ImageUrl = new Property(3, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property VideoUrl = new Property(4, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property Createtime = new Property(5, String.class, "createtime", false, "CREATETIME");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Message = new Property(7, String.class, "message", false, "MESSAGE");
        public final static Property Price = new Property(8, int.class, "price", false, "PRICE");
        public final static Property Discount_price = new Property(9, int.class, "discount_price", false, "DISCOUNT_PRICE");
        public final static Property Total = new Property(10, int.class, "total", false, "TOTAL");
        public final static Property Sales = new Property(11, int.class, "sales", false, "SALES");
    }


    public ShopDao(DaoConfig config) {
        super(config);
    }
    
    public ShopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"IMAGE_URL\" TEXT," + // 3: imageUrl
                "\"VIDEO_URL\" TEXT," + // 4: videoUrl
                "\"CREATETIME\" TEXT," + // 5: createtime
                "\"TITLE\" TEXT," + // 6: title
                "\"MESSAGE\" TEXT," + // 7: message
                "\"PRICE\" INTEGER NOT NULL ," + // 8: price
                "\"DISCOUNT_PRICE\" INTEGER NOT NULL ," + // 9: discount_price
                "\"TOTAL\" INTEGER NOT NULL ," + // 10: total
                "\"SALES\" INTEGER NOT NULL );"); // 11: sales
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(5, videoUrl);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(6, createtime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(8, message);
        }
        stmt.bindLong(9, entity.getPrice());
        stmt.bindLong(10, entity.getDiscount_price());
        stmt.bindLong(11, entity.getTotal());
        stmt.bindLong(12, entity.getSales());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(4, imageUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(5, videoUrl);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(6, createtime);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(8, message);
        }
        stmt.bindLong(9, entity.getPrice());
        stmt.bindLong(10, entity.getDiscount_price());
        stmt.bindLong(11, entity.getTotal());
        stmt.bindLong(12, entity.getSales());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Shop readEntity(Cursor cursor, int offset) {
        Shop entity = new Shop( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createtime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // message
            cursor.getInt(offset + 8), // price
            cursor.getInt(offset + 9), // discount_price
            cursor.getInt(offset + 10), // total
            cursor.getInt(offset + 11) // sales
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Shop entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideoUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreatetime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMessage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrice(cursor.getInt(offset + 8));
        entity.setDiscount_price(cursor.getInt(offset + 9));
        entity.setTotal(cursor.getInt(offset + 10));
        entity.setSales(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Shop entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Shop entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Shop entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
